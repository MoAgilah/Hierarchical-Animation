#include "BulletPool.h"

BulletPool::BulletPool()
{
	p_Bullet = CommonMesh::LoadFromXFile(Application::s_pApp, "Resources/Plane/bullet.x");

	for (int i = 0; i < MaxBullet; ++i)
	{
		bullets.push_back(new Bullet(p_Bullet));
	}

	//the first one is available
	firstAvailable = bullets[0];

	//each bullet points to the next
	for (int i = 0; i < MaxBullet - 1; ++i)
	{
		bullets[i]->setNext(bullets[i + 1]);
	}

	//the last one terminataes the list
	bullets[MaxBullet - 1]->setNext(nullptr);
}

BulletPool::~BulletPool()
{
	for (int i = 0; i < bullets.size(); ++i)
	{
		delete bullets[i];
	}
}

void BulletPool::Create(const XMFLOAT4& pos, const XMFLOAT4& rot, const XMVECTOR& fVec)
{
	//make sure the pool isn't full
	assert((firstAvailable != nullptr));

	//remove it from the available list
	Bullet* newBullet = firstAvailable;
	firstAvailable = newBullet->getNext();

	newBullet->Activate(pos, rot, fVec);
}

void BulletPool::Update(const float& deltaTime)
{
	for (int i = 0; i < MaxBullet; ++i)
	{
		if (bullets[i]->GetActive())
		{
			if (bullets[i]->Update(deltaTime))
			{
				bullets[i]->Deactivate();
				bullets[i]->setNext(firstAvailable);
				firstAvailable = bullets[i];
			}
		}
	}
}

void BulletPool::Draw()
{
	for (int i = 0; i < MaxBullet; ++i)
	{
		if (bullets[i]->GetActive())
		{
			bullets[i]->Draw();
		}
	}
}