#include "Hierarchy.h"
#include <algorithm>
#include <fstream>
#include <sstream> 

bool isUneeded(char c)
{
	return (c == '\"' || c == ',');
}

MeshComponent* Hiearchy::s_Root = nullptr;
map<string, MeshComponent*> Hiearchy::hierachie;
map<string, Animation*> Hiearchy::animations;

Hiearchy::Hiearchy(string fN, string hfN, XMFLOAT3 p, XMFLOAT3 r, float s)
	:fName(fN),hfName(hfN), iP(p), iR(r), sF(s)
{
	Root = "";
	timer = 0;
	stride = 0;
	hasAnim = false;
}

Hiearchy::~Hiearchy()
{
	delete s_Root;
}

MeshComponent* Hiearchy::GetByName(const string& name)
{
	return hierachie.find(name)->second;
}

MeshComponent* Hiearchy::GetRoot()
{
	return GetByName(Root);
}

void Hiearchy::LoadFromFile()
{
	string line;
	vector<string> l;
	float pX, pY, pZ;
	ifstream in;
	string path = "Resources/" + fName + "/" + hfName;
	in.open(path, fstream::out);

	while (getline(in, line)){
		line.erase(remove_if(line.begin(), line.end(), isUneeded), line.end());
		l.push_back(line);
	}

	Root = l[0];
	stringstream pos(l[2]);
	pos >> pX;	pos >> pY;	pos >> pZ;
	pX /= sF; pY /= sF; pZ /= sF;

	s_Root = new MeshComponent(XMFLOAT3(pX + iP.x, pY + iP.y, pZ + iP.z), XMFLOAT3(iR.x, iR.y, iR.z), fName, l[0]);
	hierachie.insert(std::pair<string, MeshComponent*>(l[0], s_Root));

	for (int i = 3; i < l.size(); i += 3)
	{
		stringstream pos(l[i + 2]);
		pos >> pX;	pos >> pY;	pos >> pZ;
		pX /= sF; pY /= sF; pZ /= sF;
		hierachie.insert(std::pair<string, MeshComponent*>(l[i], new MeshComponent(XMFLOAT3(pX, pY, pZ), XMFLOAT3(0, 0, 0), fName, l[i])));
	}

	for (int i = 3; i < l.size(); i += 3)
	{
		if (l[i + 1] != "")
		{
			GetByName(l[i + 1])->AddChild(GetByName(l[i]));
		}
	}

	in.close();
}

void Hiearchy::LoadAnimation(const string& aName)
{
	animations.insert(std::pair<string, Animation*>(aName, new Animation(fName, aName, sF)));
	if (!GetRoot()->GetHasAnim())GetRoot()->SetHasAnim();
}

void Hiearchy::Animate(const float& time)
{
	timer += time;

	XMFLOAT4 trans, rot;
	
	for (int i = 0; i < GetClipByName("Idle")->ani.size(); i += 4)
	{
		if (timer <= GetClipByName("Idle")->keyframes.front())
		{
			if (GetClipByName("Idle")->ani[i].name == "root")
			{
				trans = XMFLOAT4(*GetClipByName("Idle")->ani[i].val.begin() + iP.x, 
					*(GetClipByName("Idle")->ani[i].val.begin()+1) + iP.y, 
					*(GetClipByName("Idle")->ani[i].val.begin()+2) + iP.z, 0);
				GetByName(GetClipByName("Idle")->ani[i].name)->GetLocPos() = trans;
			}
			else
			{
				trans = XMFLOAT4(*GetClipByName("Idle")->ani[i].val.begin(),
					*(GetClipByName("Idle")->ani[i].val.begin()+1),
					*(GetClipByName("Idle")->ani[i].val.begin()+2), 0);
				GetByName(GetClipByName("Idle")->ani[i].name)->GetLocPos() = trans;
			}

			rot = XMFLOAT4(GetClipByName("Idle")->ani[i + 1].val.front(), 
				GetClipByName("Idle")->ani[i + 2].val.front(), 
				GetClipByName("Idle")->ani[i + 3].val.front(), 0);
			GetByName(GetClipByName("Idle")->ani[i + 1].name)->GetLocRot() = rot;
		}
		else if (timer >= GetClipByName("Idle")->keyframes.back())
		{
			if (GetClipByName("Idle")->ani[i].name == "root")
			{
				trans = XMFLOAT4(*(GetClipByName("Idle")->ani[i].val.end() - 3) + iP.x,
					*(GetClipByName("Idle")->ani[i].val.end() - 2) + iP.y,
					*(GetClipByName("Idle")->ani[i].val.end() - 1) + iP.z, 0);
				GetByName(GetClipByName("Idle")->ani[i].name)->GetLocPos() = trans;
			}
			else
			{
				trans = XMFLOAT4(*(GetClipByName("Idle")->ani[i].val.end() - 3),
					*(GetClipByName("Idle")->ani[i].val.end() - 2),
					*(GetClipByName("Idle")->ani[i].val.end() - 1), 0);
				GetByName(GetClipByName("Idle")->ani[i].name)->GetLocPos() = trans;
			}

			rot = XMFLOAT4(GetClipByName("Idle")->ani[i + 1].val.back(),
				GetClipByName("Idle")->ani[i + 2].val.back(),
				GetClipByName("Idle")->ani[i + 3].val.back(), 0);
			GetByName(GetClipByName("Idle")->ani[i + 1].name)->GetLocRot() = rot;

			timer = 0;
		}
		else if (timer >= GetClipByName("Idle")->keyframes[1])
		{
			if (GetClipByName("Idle")->ani[i].name == "root")
			{
				trans = XMFLOAT4(GetClipByName("Idle")->ani[i].val[0] + iP.x,
					GetClipByName("Idle")->ani[i].val[1] + iP.y,
					GetClipByName("Idle")->ani[i].val[2] + iP.z, 0);
				GetByName(GetClipByName("Idle")->ani[i].name)->GetLocPos() = trans;
			}
			else
			{
				trans = XMFLOAT4(GetClipByName("Idle")->ani[i].val[0],
					GetClipByName("Idle")->ani[i].val[1],
					GetClipByName("Idle")->ani[i].val[2], 0);
				GetByName(GetClipByName("Idle")->ani[i].name)->GetLocPos() = trans;
			}

			rot = XMFLOAT4(GetClipByName("Idle")->ani[i + 1].val[1],
				GetClipByName("Idle")->ani[i + 2].val[1],
				GetClipByName("Idle")->ani[i + 3].val[2], 0);
			GetByName(GetClipByName("Idle")->ani[i + 1].name)->GetLocRot() = rot;
		}

		//else
		//{
		//	for (int j = 0; j < GetClipByName("Idle")->keyframes.size()-1; ++j)
		//	{
		//		if (timer >= GetClipByName("Idle")->keyframes[j] && timer <= GetClipByName("Idle")->keyframes[j+1])
		//		{
		//			float lerpPercent = (timer - GetClipByName("Idle")->keyframes[j]) /
		//				(GetClipByName("Idle")->keyframes[j + 1] - GetClipByName("Idle")->keyframes[j]);
		//				XMVECTOR t1, t2, r1, r2, ft, fr;
		//
		//				stride = GetClipByName("Idle")->ani[i].val.size() / 3;
		//				
		//				//trans
		//				if (stride > 1 && j > 0 && GetClipByName("Idle")->ani[i].val.size() >= stride * j)
		//				{
		//					int s = stride * j;
		//					if (GetClipByName("Idle")->ani[i].name == "root")
		//					{
		//						trans = XMFLOAT4(GetClipByName("Idle")->ani[i].val[s + 0] + iP.x,
		//							GetClipByName("Idle")->ani[i].val[s + 1] + iP.y,
		//							GetClipByName("Idle")->ani[i].val[s + 2] + iP.z, 0);
		//					}
		//					else
		//					{
		//						trans = XMFLOAT4(GetClipByName("Idle")->ani[i].val[s + 0],
		//							GetClipByName("Idle")->ani[i].val[s + 1],
		//							GetClipByName("Idle")->ani[i].val[s + 1], 0);
		//					}
		//					
		//
		//					t1 = XMLoadFloat4(&trans);
		//
		//					if (GetClipByName("Idle")->ani[i].name == "root")
		//					{
		//						trans = XMFLOAT4(GetClipByName("Idle")->ani[i].val[s + 0] + iP.x,
		//							GetClipByName("Idle")->ani[i].val[s + 1] + iP.y,
		//							GetClipByName("Idle")->ani[i].val[s + 2] + iP.z, 0);
		//					}
		//					else
		//					{
		//						trans = XMFLOAT4(GetClipByName("Idle")->ani[i].val[s + 0],
		//							GetClipByName("Idle")->ani[i].val[s + 1],
		//							GetClipByName("Idle")->ani[i].val[s + 2], 0);
		//					}
		//
		//					t2 = XMLoadFloat4(&trans);
		//					ft = XMVectorLerp(t1, t2, lerpPercent);
		//					XMStoreFloat4(&trans, ft);
		//
		//					GetByName(GetClipByName("Idle")->ani[i].name)->GetLocPos() = trans;
		//				}
		//
		//				rot = XMFLOAT4(GetClipByName("Idle")->ani[i + 1].val[j],
		//					GetClipByName("Idle")->ani[i + 2].val[j],
		//					GetClipByName("Idle")->ani[i + 3].val[j], 0);
		//
		//				GetByName(GetClipByName("Idle")->ani[i + 1].name)->GetLocRot() = rot;
		//
		//				r1 = XMLoadFloat4(&rot);
		//
		//				rot = XMFLOAT4(GetClipByName("Idle")->ani[i + 1].val[j + 1],
		//					GetClipByName("Idle")->ani[i + 2].val[j + 1],
		//					GetClipByName("Idle")->ani[i + 3].val[j + 1], 0);
		//
		//				r2 = XMLoadFloat4(&rot);
		//
		//				fr = XMVectorLerp(r1, r2, lerpPercent);
		//				XMStoreFloat4(&rot, fr);
		//
		//				GetByName(GetClipByName("Idle")->ani[i + 1].name)->GetLocRot() = rot;
		//
		//				break;
		//		}
		//	}
		//}
	}    
}

Animation*  Hiearchy::GetClipByName(const string& name)
{
	return animations.find(name)->second;
}

void Hiearchy::Draw()
{
	s_Root->Draw();
}