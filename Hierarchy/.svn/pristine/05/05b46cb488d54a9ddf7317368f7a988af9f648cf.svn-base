#include "Hierarchy.h"
#include <algorithm>
#include <fstream>
#include <sstream> 

bool isUneeded(char c)
{
	return (c == '\"' || c == ',');
}

MeshComponent* Hiearchy::s_Root = nullptr;
map<string, MeshComponent*> Hiearchy::hierachie;

Hiearchy::Hiearchy(string fN, string hfN, XMFLOAT3 p, XMFLOAT3 r, float s)
	:fName(fN),hfName(hfN), iP(p), iR(r), sF(s)
{
	Root = "";
}

Hiearchy::~Hiearchy()
{
	delete s_Root;
}

MeshComponent* Hiearchy::GetByName(string name)
{
	return hierachie.find(name)->second;
}

MeshComponent* Hiearchy::GetRoot()
{
	return GetByName(Root);
}

void Hiearchy::LoadFromFile()
{
	string line;
	vector<string> l;
	float pX, pY, pZ;
	ifstream in;
	string path = "Resources/" + fName + "/" + hfName;
	in.open(path, fstream::out);

	while (getline(in, line)){
		line.erase(remove_if(line.begin(), line.end(), isUneeded), line.end());
		l.push_back(line);
	}

	Root = l[0];
	stringstream pos(l[2]);
	pos >> pX;	pos >> pY;	pos >> pZ;
	pX /= sF; pY /= sF; pZ /= sF;

	s_Root = new MeshComponent(XMFLOAT3(pX + iP.x, pY + iP.y, pZ + iP.z), XMFLOAT3(iR.x, iR.y, iR.z), fName, l[0]);
	hierachie.insert(std::pair<string, MeshComponent*>(l[0], s_Root));

	for (int i = 3; i < l.size(); i += 3)
	{
		stringstream pos(l[i + 2]);
		pos >> pX;	pos >> pY;	pos >> pZ;
		pX /= sF; pY /= sF; pZ /= sF;
		hierachie.insert(std::pair<string, MeshComponent*>(l[i], new MeshComponent(XMFLOAT3(pX, pY, pZ), XMFLOAT3(0, 0, 0), fName, l[i])));
	}

	for (int i = 3; i < l.size(); i += 3)
	{
		if (l[i + 1] != "")
		{
			GetByName(l[i + 1])->AddChild(GetByName(l[i]));
		}
	}

	in.close();
}

void Hiearchy::Draw()
{
	s_Root->Draw();
}